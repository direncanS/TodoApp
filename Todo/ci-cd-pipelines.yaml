name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Linting Stage
  lint-frontend:
    runs-on: ubuntu-latest
    name: Lint Frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      - name: Run linter
        run: |
          cd frontend
          npm run lint

  lint-backend:
    runs-on: ubuntu-latest
    name: Lint Backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd backend
          npm install
      - name: Run linter
        run: |
          cd backend
          npm run lint

  # Static Code Analysis Stage
  analyze-frontend:
    runs-on: ubuntu-latest
    name: Analyze Frontend Code
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: "-Dsonar.projectKey=frontend -Dsonar.sources=."

  analyze-backend:
    runs-on: ubuntu-latest
    name: Analyze Backend Code
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd backend
          npm install
      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v1.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: "-Dsonar.projectKey=backend -Dsonar.sources=."

  # Testing Stage
  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./frontend/coverage/*.json

  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd backend
          npm install
      - name: Run tests
        run: |
          cd backend
          npm test -- --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./backend/coverage/*.json

  # Build Stage
  build-frontend:
    runs-on: ubuntu-latest
    name: Build Frontend Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Docker image
        run: |
          docker build -t my-frontend ./frontend

  build-backend:
    runs-on: ubuntu-latest
    name: Build Backend Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Docker image
        run: |
          docker build -t my-backend ./backend

  # Delivery Stage
  push-frontend:
    runs-on: ubuntu-latest
    name: Push Frontend Docker Image to Docker Hub
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Push Docker image
        run: |
          docker tag my-frontend ${{ secrets.DOCKER_USERNAME }}/my-frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/my-frontend

  push-backend:
    runs-on: ubuntu-latest
    name: Push Backend Docker Image to Docker Hub
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Push Docker image
        run: |
          docker tag my-backend ${{ secrets.DOCKER_USERNAME }}/my-backend
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend

  # Deploy Stage
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to AWS
    needs: [push-frontend, push-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy services to ECS
        run: |
          aws ecs update-service --cluster my-cluster --service frontend-service --force-new-deployment
          aws ecs update-service --cluster my-cluster --service backend-service --force-new-deployment
